// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protoc/todo.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoManagerClient is the client API for TodoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoManagerClient interface {
	CreateTodoItem(ctx context.Context, in *CreateTodo, opts ...grpc.CallOption) (*Todo, error)
	GetTodoList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todos, error)
	GetTodoItemByID(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*Todo, error)
	DeleteTodo(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*ConfirmMessage, error)
	UpdateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
}

type todoManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoManagerClient(cc grpc.ClientConnInterface) TodoManagerClient {
	return &todoManagerClient{cc}
}

func (c *todoManagerClient) CreateTodoItem(ctx context.Context, in *CreateTodo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/demo.TodoManager/CreateTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoManagerClient) GetTodoList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, "/demo.TodoManager/GetTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoManagerClient) GetTodoItemByID(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/demo.TodoManager/GetTodoItemByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoManagerClient) DeleteTodo(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*ConfirmMessage, error) {
	out := new(ConfirmMessage)
	err := c.cc.Invoke(ctx, "/demo.TodoManager/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoManagerClient) UpdateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/demo.TodoManager/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoManagerServer is the server API for TodoManager service.
// All implementations must embed UnimplementedTodoManagerServer
// for forward compatibility
type TodoManagerServer interface {
	CreateTodoItem(context.Context, *CreateTodo) (*Todo, error)
	GetTodoList(context.Context, *emptypb.Empty) (*Todos, error)
	GetTodoItemByID(context.Context, *TodoId) (*Todo, error)
	DeleteTodo(context.Context, *TodoId) (*ConfirmMessage, error)
	UpdateTodo(context.Context, *Todo) (*Todo, error)
	mustEmbedUnimplementedTodoManagerServer()
}

// UnimplementedTodoManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTodoManagerServer struct {
}

func (UnimplementedTodoManagerServer) CreateTodoItem(context.Context, *CreateTodo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoItem not implemented")
}
func (UnimplementedTodoManagerServer) GetTodoList(context.Context, *emptypb.Empty) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoList not implemented")
}
func (UnimplementedTodoManagerServer) GetTodoItemByID(context.Context, *TodoId) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoItemByID not implemented")
}
func (UnimplementedTodoManagerServer) DeleteTodo(context.Context, *TodoId) (*ConfirmMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoManagerServer) UpdateTodo(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoManagerServer) mustEmbedUnimplementedTodoManagerServer() {}

// UnsafeTodoManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoManagerServer will
// result in compilation errors.
type UnsafeTodoManagerServer interface {
	mustEmbedUnimplementedTodoManagerServer()
}

func RegisterTodoManagerServer(s grpc.ServiceRegistrar, srv TodoManagerServer) {
	s.RegisterService(&TodoManager_ServiceDesc, srv)
}

func _TodoManager_CreateTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoManagerServer).CreateTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.TodoManager/CreateTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoManagerServer).CreateTodoItem(ctx, req.(*CreateTodo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoManager_GetTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoManagerServer).GetTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.TodoManager/GetTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoManagerServer).GetTodoList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoManager_GetTodoItemByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoManagerServer).GetTodoItemByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.TodoManager/GetTodoItemByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoManagerServer).GetTodoItemByID(ctx, req.(*TodoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoManager_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoManagerServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.TodoManager/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoManagerServer).DeleteTodo(ctx, req.(*TodoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoManager_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoManagerServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.TodoManager/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoManagerServer).UpdateTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoManager_ServiceDesc is the grpc.ServiceDesc for TodoManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.TodoManager",
	HandlerType: (*TodoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodoItem",
			Handler:    _TodoManager_CreateTodoItem_Handler,
		},
		{
			MethodName: "GetTodoList",
			Handler:    _TodoManager_GetTodoList_Handler,
		},
		{
			MethodName: "GetTodoItemByID",
			Handler:    _TodoManager_GetTodoItemByID_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoManager_DeleteTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodoManager_UpdateTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/todo.proto",
}
